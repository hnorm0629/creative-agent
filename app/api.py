# app/api.py

"""
FastAPI route definitions for generating creative plans from text, image, video, or surprise prompts.
"""

from fastapi import APIRouter, HTTPException, File, UploadFile
from app.logger import logger
from app.models import PlanRequest, CreativePlan
from app.planner.core import plan_from_brief
from app.planner.llm_openai import generate_surprise_brief
from app.planner.image_captioning import caption_image
from app.planner.video_captioning import caption_video

router = APIRouter()

@router.post("/plans", response_model=CreativePlan)
async def generate_plan(request: PlanRequest):
    """
    Generate a creative video plan from an unstructured text input.
    """
    try:
        plan = await plan_from_brief(request.input)
        return plan
    except Exception as e:
        logger.exception("Error generating plan from text input")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/plans/from-image", response_model=CreativePlan)
async def create_plan_from_image(file: UploadFile = File(...)):
    """
    Accepts an uploaded image, generates a creative caption using Gemini Vision,
    and uses that caption as input to the planner.
    """
    try:
        contents = await file.read()
        logger.info(f"Received image upload: {file.filename}, size: {len(contents)} bytes")

        caption = await caption_image(contents)
        logger.info("Generated caption from image:\n%s", caption)

        plan = await plan_from_brief(caption)
        return plan
    except Exception as e:
        logger.exception("Error generating creative plan from image")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/plans/from-video", response_model=CreativePlan)
async def create_plan_from_video(file: UploadFile = File(...)):
    """
    Accepts an uploaded video, generates a creative paragraph using Gemini Vision,
    and uses that caption as input to the planner.
    """
    try:
        contents = await file.read()
        logger.info(f"Received video upload: {file.filename}, size: {len(contents)} bytes")

        caption = await caption_video(contents)
        logger.info("Generated caption from video: %s", caption)

        plan = await plan_from_brief(caption)
        return plan
    except Exception as e:
        logger.exception("Error generating creative plan from video")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/surprise")
async def get_surprise_brief():
    """
    Returns a one-sentence surprise video brief generated by OpenAI.
    """
    try:
        brief = await generate_surprise_brief()
        return {"brief": brief}
    except Exception as e:
        logger.exception("Error generating surprise brief")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/health")
def health_check():
    """
    Simple liveness check endpoint.
    """
    return {"status": "ok"}
